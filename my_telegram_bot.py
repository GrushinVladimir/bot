import logging
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, JobQueue
import os
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_CHANGES_URL = os.getenv('API')  # API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
API_SCHEDULE_URL = os.getenv('API2')  # API –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
}

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
resources_state = {}
active_chats = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def fetch_changes_data():
    try:
        logging.info(f"–ó–∞–ø—Ä–æ—Å –∫ {API_CHANGES_URL}")
        async with httpx.AsyncClient(verify=False, headers=HEADERS) as client:
            response = await client.get(API_CHANGES_URL)
            response.raise_for_status()
            logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
            return response.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
        return None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def fetch_schedule_data():
    try:
        async with httpx.AsyncClient(verify=False, headers=HEADERS) as client:
            response = await client.get(API_SCHEDULE_URL)
            response.raise_for_status()
            return response.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def check_for_updates(context: ContextTypes.DEFAULT_TYPE):
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    changes_data = await fetch_changes_data()
    schedule_data = await fetch_schedule_data()

    global resources_state, active_chats

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if changes_data:
        if "changes" not in resources_state:
            resources_state["changes"] = changes_data  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        else:
            for i, folder in enumerate(changes_data):
                if i >= len(resources_state["changes"]):
                    continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω
                for j, resource in enumerate(folder.get('resources', [])):
                    if j >= len(resources_state["changes"][i].get('resources', [])):
                        continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω
                    if resource != resources_state["changes"][i]['resources'][j]:
                        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                        await notify_users(context, folder, resource, "changes")
            resources_state["changes"] = changes_data  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    if schedule_data:
        if "schedule" not in resources_state:
            resources_state["schedule"] = schedule_data  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        else:
            for i, resource in enumerate(schedule_data):
                if i >= len(resources_state["schedule"]):
                    continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω
                if resource != resources_state["schedule"][i]:
                    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    await notify_users(context, None, resource, "schedule")
            resources_state["schedule"] = schedule_data  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notify_users(context: ContextTypes.DEFAULT_TYPE, folder, resource, data_type):
    for chat_id in active_chats:
        message = "–í–Ω–∏–º–∞–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ!!!\n"
        if data_type == "changes":
            message += f"–ù–µ–¥–µ–ª—è: {folder['pagetitle']}\n–§–∞–π–ª: {resource['pagetitle']}"
        elif data_type == "schedule":
            message += f"–î–µ–Ω—å: {resource['pagetitle']}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await context.bot.send_message(chat_id=chat_id, text=message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF-—Ñ–∞–π–ª
        try:
            async with httpx.AsyncClient(verify=False, headers=HEADERS) as client:
                response = await client.get(resource['url'])
                response.raise_for_status()
                pdf_file = response.content
                filename = resource['pagetitle']
                if not filename.endswith('.pdf'):
                    filename += '.pdf'
                await context.bot.send_document(
                    chat_id=chat_id,
                    document=InputFile(pdf_file, filename=filename),
                    caption=f"–§–∞–π–ª: {filename}"
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
            await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF.")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø–∞–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def create_changes_folders_keyboard(folders):
    keyboard = []
    for i in range(0, len(folders), 2):  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        row = [
            InlineKeyboardButton(folders[j]['pagetitle'], callback_data=f"changes_folder_{j}")
            for j in range(i, min(i + 2, len(folders)))
        ]
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å ‚è≥", callback_data="refresh_changes")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
def create_changes_resources_keyboard(resources, folder_index):
    keyboard = [
        [InlineKeyboardButton(resource['pagetitle'], callback_data=f"changes_resource_{folder_index}_{i}")]
        for i, resource in enumerate(resources) if resource.get('url')
    ]
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_changes_folders")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def create_schedule_keyboard(resources):
    keyboard = []
    for i in range(0, len(resources), 3):  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        row = [
            InlineKeyboardButton(resources[j]['pagetitle'], callback_data=f"schedule_{j}")
            for j in range(i, min(i + 3, len(resources))) if resources[j].get('url')
        ]
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–π –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
    return InlineKeyboardMarkup(keyboard)

# –û—Ç–ø—Ä–∞–≤–∫–∞ PDF-—Ñ–∞–π–ª–∞
async def send_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE, url: str, filename: str):
    try:
        async with httpx.AsyncClient(verify=False, headers=HEADERS) as client:
            response = await client.get(url)
            response.raise_for_status()
            pdf_file = response.content
            if not filename.endswith('.pdf'):
                filename += '.pdf'
            await update.callback_query.message.reply_document(
                document=InputFile(pdf_file, filename=filename)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")
        await update.callback_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PDF.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    active_chats.add(chat_id)  # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
        [InlineKeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", callback_data="changes")]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if data == "changes":
        folders = await fetch_changes_data()
        if folders:
            keyboard = create_changes_folders_keyboard(folders)
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
                reply_markup=keyboard
            )
        else:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    elif data == "schedule":
        resources = await fetch_schedule_data()
        if resources:
            keyboard = create_schedule_keyboard(resources)
            await query.edit_message_text(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
                reply_markup=keyboard
            )
        else:
            await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    elif data.startswith("changes_folder_"):
        folder_index = int(data.split("_")[2])
        folders = await fetch_changes_data()
        if folders and 0 <= folder_index < len(folders):
            resources = folders[folder_index].get('resources', [])
            keyboard = create_changes_resources_keyboard(resources, folder_index)
            await query.edit_message_text(
                f"üìö –ù–µ–¥–µ–ª—è: {folders[folder_index]['pagetitle']}",
                reply_markup=keyboard
            )
    elif data.startswith("changes_resource_"):
        parts = data.split("_")
        if len(parts) == 4:
            folder_index = int(parts[2])
            resource_index = int(parts[3])
            folders = await fetch_changes_data()
            if folders and 0 <= folder_index < len(folders):
                resources = folders[folder_index].get('resources', [])
                if 0 <= resource_index < len(resources):
                    resource = resources[resource_index]
                    await send_pdf(update, context, resource['url'], resource['pagetitle'])
    elif data.startswith("schedule_"):
        resource_index = int(data.split("_")[1])
        resources = await fetch_schedule_data()
        if resources and 0 <= resource_index < len(resources):
            resource = resources[resource_index]
            await send_pdf(update, context, resource['url'], resource['pagetitle'])
    elif data == "back_to_changes_folders":
        folders = await fetch_changes_data()
        if folders:
            keyboard = create_changes_folders_keyboard(folders)
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
                reply_markup=keyboard
            )
    elif data == "back_to_main_menu":
        keyboard = [
            [InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏", callback_data="changes")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif data == "refresh_changes":
        folders = await fetch_changes_data()
        if folders:
            keyboard = create_changes_folders_keyboard(folders)
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
                reply_markup=keyboard
            )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
    job_queue = application.job_queue
    job_queue.run_repeating(check_for_updates, interval=300.0, first=5.0)  # 15 —Å–µ–∫—É–Ω–¥

    application.run_polling()

if __name__ == "__main__":
    main()
